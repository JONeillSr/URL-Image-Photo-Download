<#
.SYNOPSIS
    Analyzes auction extraction log files and generates comprehensive reports.

.DESCRIPTION
    This script parses log files generated by Extract-AuctionURLs.ps1 and provides
    various analytics and reports including:
    - Extraction statistics across multiple runs
    - Error and warning summaries
    - Auction processing history
    - Performance metrics
    - Skipped lot analysis
    
.PARAMETER LogPath
    Mandatory. Either:
    - Path to a single log file
    - Path to a folder containing multiple log files
    - Wildcard path (e.g., "C:\Logs\*.log")

.PARAMETER ReportType
    Optional. Type of report to generate:
    - 'Summary' (default): Overview of all extractions
    - 'Detailed': Comprehensive analysis with all details
    - 'Errors': Focus on errors and warnings only
    - 'Auctions': Track which auctions have been processed
    - 'History': Timeline of all extractions
    - 'Performance': Timing and efficiency metrics
    - 'Skipped': Analysis of skipped lots

.PARAMETER OutputFormat
    Optional. Format for output:
    - 'Console' (default): Display in terminal
    - 'CSV': Export to CSV file(s)
    - 'HTML': Generate HTML report
    - 'JSON': Export as JSON

.PARAMETER OutputPath
    Optional. Path for exported reports. Default is current directory.

.PARAMETER DaysBack
    Optional. Only analyze logs from the last N days. Default is all logs.

.PARAMETER AuctionFilter
    Optional. Filter to specific auction catalog ID(s). Comma-separated list.

.PARAMETER SortBy
    Optional. Sort results by:
    - 'Date' (default): Chronological order
    - 'Lots': Number of lots processed
    - 'Auctions': Number of auctions
    - 'Errors': Number of errors/warnings

.PARAMETER ShowProgress
    Optional switch. Display progress when processing multiple log files.

.PARAMETER GroupByUser
    Optional switch. Group results by user who ran the extraction.

.PARAMETER IncludeSkippedDetails
    Optional switch. Include detailed information about skipped lots.

.EXAMPLE
    .\Get-AuctionLogSummary.ps1 -LogPath "C:\Logs"
    
    Analyze all log files in the Logs folder.

.EXAMPLE
    .\Get-AuctionLogSummary.ps1 -LogPath "*.log" -ReportType Detailed
    
    Generate detailed report for all log files in current directory.

.EXAMPLE
    .\Get-AuctionLogSummary.ps1 -LogPath "C:\Logs" -ReportType Errors -DaysBack 7
    
    Show only errors from the last 7 days.

.EXAMPLE
    .\Get-AuctionLogSummary.ps1 -LogPath "C:\Logs" -ReportType Auctions -OutputFormat CSV
    
    Export auction processing history to CSV.

.EXAMPLE
    .\Get-AuctionLogSummary.ps1 -LogPath "C:\Logs" -AuctionFilter "brolyn10244,brolyn10245"
    
    Analyze only specific auctions.

.EXAMPLE
    .\Get-AuctionLogSummary.ps1 -LogPath "C:\Logs" -ReportType History -OutputFormat HTML -OutputPath "report.html"
    
    Generate HTML timeline report with interactive charts.

.EXAMPLE
    .\Get-AuctionLogSummary.ps1 -LogPath "C:\Logs" -OutputFormat HTML
    
    Generate comprehensive HTML dashboard with all charts and statistics.

	.NOTES
    Author: John O'Neill Sr.
    Company: Azure Innovators
    Date: 10/05/2025
    Version: 1.0
    Change Date:
    Change Purpose:
#>

param(
    [Parameter(Mandatory=$true)]
    [string]$LogPath,
    
    [Parameter(Mandatory=$false)]
    [ValidateSet('Summary', 'Detailed', 'Errors', 'Auctions', 'History', 'Performance', 'Skipped')]
    [string]$ReportType = 'Summary',
    
    [Parameter(Mandatory=$false)]
    [ValidateSet('Console', 'CSV', 'HTML', 'JSON')]
    [string]$OutputFormat = 'Console',
    
    [Parameter(Mandatory=$false)]
    [string]$OutputPath = ".",
    
    [Parameter(Mandatory=$false)]
    [int]$DaysBack = 0,
    
    [Parameter(Mandatory=$false)]
    [string]$AuctionFilter = "",
    
    [Parameter(Mandatory=$false)]
    [ValidateSet('Date', 'Lots', 'Auctions', 'Errors')]
    [string]$SortBy = 'Date',
    
    [Parameter(Mandatory=$false)]
    [switch]$ShowProgress,
    
    [Parameter(Mandatory=$false)]
    [switch]$GroupByUser,
    
    [Parameter(Mandatory=$false)]
    [switch]$IncludeSkippedDetails
)

# Parse a single log file
function Get-LogFileData {
    param([string]$FilePath)
    
    $content = Get-Content -Path $FilePath -Raw
    $lines = Get-Content -Path $FilePath
    
    $logData = [PSCustomObject]@{
        FilePath = $FilePath
        FileName = Split-Path $FilePath -Leaf
        StartTime = $null
        EndTime = $null
        Duration = $null
        ScriptVersion = $null
        User = $null
        Computer = $null
        Source = $null
        OutputFolder = $null
        ExtractMode = $null
        AuctionFilter = $null
        FilePattern = $null
        RequireLotNumbers = $null
        FilesProcessed = 0
        TotalAuctions = 0
        TotalLots = 0
        SkippedLots = 0
        Auctions = @()
        Errors = @()
        Warnings = @()
        SuccessMessages = @()
        UserChoice = $null
        ExtractedAuctions = @()
        Status = "Unknown"
    }
    
    # Parse header information
    if ($content -match 'Started:\s+(.+)') {
        $logData.StartTime = [DateTime]::Parse($matches[1])
    }
    
    if ($content -match 'Script Version:\s+(.+)') {
        $logData.ScriptVersion = $matches[1].Trim()
    }
    
    if ($content -match 'User:\s+(.+)') {
        $logData.User = $matches[1].Trim()
    }
    
    if ($content -match 'Computer:\s+(.+)') {
        $logData.Computer = $matches[1].Trim()
    }
    
    # Parse parameters
    if ($content -match 'Source:\s+(.+)') {
        $logData.Source = $matches[1].Trim()
    }
    
    if ($content -match 'Output Folder:\s+(.+)') {
        $logData.OutputFolder = $matches[1].Trim()
    }
    
    if ($content -match 'Extract Mode:\s+(.+)') {
        $logData.ExtractMode = $matches[1].Trim()
    }
    
    if ($content -match 'Auction Filter:\s+(.+)') {
        $filter = $matches[1].Trim()
        if ($filter -ne "None") {
            $logData.AuctionFilter = $filter
        }
    }
    
    if ($content -match 'File Pattern:\s+(.+)') {
        $logData.FilePattern = $matches[1].Trim()
    }
    
    if ($content -match 'Require Lot Numbers:\s+(.+)') {
        $logData.RequireLotNumbers = $matches[1].Trim()
    }
    
    # Parse summary statistics
    if ($content -match 'Summary: Files=(\d+), Auctions=(\d+), Lots=(\d+), Skipped=(\d+)') {
        $logData.FilesProcessed = [int]$matches[1]
        $logData.TotalAuctions = [int]$matches[2]
        $logData.TotalLots = [int]$matches[3]
        $logData.SkippedLots = [int]$matches[4]
    }
    
    # Parse auction details
    $auctionMatches = [regex]::Matches($content, '\[(\d+)\] Catalog: (\S+) \| Lots: (\d+) \| Range: (.+?)(?=\r?\n)')
    foreach ($match in $auctionMatches) {
        $logData.Auctions += [PSCustomObject]@{
            Index = [int]$match.Groups[1].Value
            CatalogId = $match.Groups[2].Value
            Lots = [int]$match.Groups[3].Value
            Range = $match.Groups[4].Value
        }
    }
    
    # Parse user choice
    if ($content -match 'User choice:\s+(.+)') {
        $logData.UserChoice = $matches[1].Trim()
    }
    
    # Parse extracted auctions
    $extractMatches = [regex]::Matches($content, 'Extracting auction:\s+(\S+)')
    foreach ($match in $extractMatches) {
        if ($logData.ExtractedAuctions -notcontains $match.Groups[1].Value) {
            $logData.ExtractedAuctions += $match.Groups[1].Value
        }
    }
    
    # Parse errors, warnings, and success messages
    foreach ($line in $lines) {
        if ($line -match '^\[(.+?)\] \[(Error)\] (.+)$') {
            $logData.Errors += [PSCustomObject]@{
                Time = [DateTime]::Parse($matches[1])
                Message = $matches[3]
            }
        }
        elseif ($line -match '^\[(.+?)\] \[(Warning)\] (.+)$') {
            $logData.Warnings += [PSCustomObject]@{
                Time = [DateTime]::Parse($matches[1])
                Message = $matches[3]
            }
        }
        elseif ($line -match '^\[(.+?)\] \[(Success)\] (.+)$') {
            $logData.SuccessMessages += [PSCustomObject]@{
                Time = [DateTime]::Parse($matches[1])
                Message = $matches[3]
            }
        }
    }
    
    # Determine end time and status
    if ($logData.SuccessMessages.Count -gt 0) {
        $logData.EndTime = $logData.SuccessMessages[-1].Time
        $logData.Status = "Completed"
        
        if ($logData.SuccessMessages[-1].Message -match "Extraction completed successfully") {
            $logData.Status = "Success"
        }
    }
    
    if ($logData.Errors.Count -gt 0) {
        $logData.Status = "Failed"
        if (($null -eq $logData.EndTime) -and $logData.Errors.Count -gt 0) {
            $logData.EndTime = $logData.Errors[-1].Time
        }
    }
    
    # Calculate duration
    if ($null -ne $logData.StartTime -and $null -ne $logData.EndTime) {
        $logData.Duration = $logData.EndTime - $logData.StartTime
    }
    
    return $logData
}

# Get log files to analyze
function Get-LogFiles {
    param([string]$Path)
    
    $files = @()
    
    if (Test-Path -Path $Path -PathType Leaf) {
        $files = @(Get-Item -Path $Path)
    }
    elseif (Test-Path -Path $Path -PathType Container) {
        $files = Get-ChildItem -Path $Path -Filter "*.log" -File | Sort-Object LastWriteTime -Descending
    }
    else {
        # Try as wildcard
        $files = Get-ChildItem -Path $Path -File | Sort-Object LastWriteTime -Descending
    }
    
    return $files
}

# Filter logs by date
function Select-LogsByDate {
    param(
        [array]$Logs,
        [int]$Days
    )
    
    if ($Days -le 0) {
        return $Logs
    }
    
    $cutoffDate = (Get-Date).AddDays(-$Days)
    return $Logs | Where-Object { $_.StartTime -ge $cutoffDate }
}

# Filter logs by auction
function Select-LogsByAuction {
    param(
        [array]$Logs,
        [string]$Filter
    )
    
    if ([string]::IsNullOrWhiteSpace($Filter)) {
        return $Logs
    }
    
    $auctionIds = $Filter -split ',' | ForEach-Object { $_.Trim() }
    
    return $Logs | Where-Object {
        $log = $_
        $hasMatch = $false
        foreach ($auctionId in $auctionIds) {
            if ($log.Auctions.CatalogId -contains $auctionId -or 
                $log.ExtractedAuctions -contains $auctionId) {
                $hasMatch = $true
                break
            }
        }
        $hasMatch
    }
}

# Generate Summary Report
function Show-SummaryReport {
    param([array]$Logs)
    
    Write-Host ""
    Write-Host "═══════════════════════════════════════════════════════" -ForegroundColor Cyan
    Write-Host "         AUCTION EXTRACTION LOG SUMMARY" -ForegroundColor Cyan
    Write-Host "═══════════════════════════════════════════════════════" -ForegroundColor Cyan
    Write-Host ""
    
    Write-Host "Analysis Period:" -ForegroundColor Yellow
    Write-Host "  Total log files analyzed: $($Logs.Count)" -ForegroundColor Gray
    
    if ($Logs.Count -gt 0) {
        $firstLog = $Logs | Sort-Object StartTime | Select-Object -First 1
        $lastLog = $Logs | Sort-Object StartTime | Select-Object -Last 1
        Write-Host "  Date range: $($firstLog.StartTime.ToString('yyyy-MM-dd')) to $($lastLog.StartTime.ToString('yyyy-MM-dd'))" -ForegroundColor Gray
    }
    Write-Host ""
    
    Write-Host "Overall Statistics:" -ForegroundColor Yellow
    $totalFiles = ($Logs | Measure-Object -Property FilesProcessed -Sum).Sum
    $totalAuctions = ($Logs | Measure-Object -Property TotalAuctions -Sum).Sum
    $totalLots = ($Logs | Measure-Object -Property TotalLots -Sum).Sum
    $totalSkipped = ($Logs | Measure-Object -Property SkippedLots -Sum).Sum
    
    Write-Host "  HTML files processed: $totalFiles" -ForegroundColor Gray
    Write-Host "  Unique auctions found: $totalAuctions" -ForegroundColor Gray
    Write-Host "  Total lots extracted: $totalLots" -ForegroundColor Green
    Write-Host "  Lots skipped: $totalSkipped" -ForegroundColor $(if ($totalSkipped -gt 0) { "Yellow" } else { "Gray" })
    
    if ($totalLots -gt 0) {
        $skipPercent = [math]::Round(($totalSkipped / ($totalLots + $totalSkipped)) * 100, 1)
        Write-Host "  Skip rate: $skipPercent%" -ForegroundColor Gray
    }
    Write-Host ""
    
    Write-Host "Execution Results:" -ForegroundColor Yellow
    $successful = ($Logs | Where-Object { $_.Status -eq "Success" }).Count
    $failed = ($Logs | Where-Object { $_.Status -eq "Failed" }).Count
    $other = $Logs.Count - $successful - $failed
    
    Write-Host "  Successful: $successful" -ForegroundColor Green
    if ($failed -gt 0) {
        Write-Host "  Failed: $failed" -ForegroundColor Red
    }
    if ($other -gt 0) {
        Write-Host "  Other: $other" -ForegroundColor Gray
    }
    Write-Host ""
    
    $totalErrors = ($Logs | ForEach-Object { $_.Errors.Count } | Measure-Object -Sum).Sum
    $totalWarnings = ($Logs | ForEach-Object { $_.Warnings.Count } | Measure-Object -Sum).Sum
    
    if ($totalErrors -gt 0 -or $totalWarnings -gt 0) {
        Write-Host "Issues:" -ForegroundColor Yellow
        if ($totalErrors -gt 0) {
            Write-Host "  Total errors: $totalErrors" -ForegroundColor Red
        }
        if ($totalWarnings -gt 0) {
            Write-Host "  Total warnings: $totalWarnings" -ForegroundColor Yellow
        }
        Write-Host ""
    }
    
    if ($GroupByUser) {
        Write-Host "By User:" -ForegroundColor Yellow
        $byUser = $Logs | Group-Object User | Sort-Object Count -Descending
        foreach ($group in $byUser) {
            $userLots = ($group.Group | Measure-Object -Property TotalLots -Sum).Sum
            Write-Host "  $($group.Name): $($group.Count) extraction(s), $userLots lot(s)" -ForegroundColor Gray
        }
        Write-Host ""
    }
    
    # Top auctions
    $allAuctions = @{}
    foreach ($log in $Logs) {
        foreach ($auction in $log.Auctions) {
            if (-not $allAuctions.ContainsKey($auction.CatalogId)) {
                $allAuctions[$auction.CatalogId] = @{
                    Count = 0
                    TotalLots = 0
                }
            }
            $allAuctions[$auction.CatalogId].Count++
            $allAuctions[$auction.CatalogId].TotalLots += $auction.Lots
        }
    }
    
    if ($allAuctions.Count -gt 0) {
        Write-Host "Most Frequently Processed Auctions:" -ForegroundColor Yellow
        $topAuctions = $allAuctions.GetEnumerator() | 
            Sort-Object { $_.Value.Count } -Descending | 
            Select-Object -First 5
        
        foreach ($auction in $topAuctions) {
            Write-Host "  $($auction.Key): $($auction.Value.Count) time(s), $($auction.Value.TotalLots) lot(s)" -ForegroundColor Gray
        }
        Write-Host ""
    }
}

# Generate Detailed Report
function Show-DetailedReport {
    param([array]$Logs)
    
    Write-Host ""
    Write-Host "═══════════════════════════════════════════════════════" -ForegroundColor Cyan
    Write-Host "       DETAILED AUCTION EXTRACTION ANALYSIS" -ForegroundColor Cyan
    Write-Host "═══════════════════════════════════════════════════════" -ForegroundColor Cyan
    
    foreach ($log in $Logs) {
        Write-Host ""
        Write-Host "─────────────────────────────────────────────────────" -ForegroundColor DarkGray
        Write-Host "Log File: $($log.FileName)" -ForegroundColor Yellow
        Write-Host "─────────────────────────────────────────────────────" -ForegroundColor DarkGray
        
        Write-Host "  Date: $($log.StartTime.ToString('yyyy-MM-dd HH:mm:ss'))" -ForegroundColor Gray
        Write-Host "  User: $($log.User) @ $($log.Computer)" -ForegroundColor Gray
        Write-Host "  Status: " -NoNewline
        
        switch ($log.Status) {
            "Success" { Write-Host $log.Status -ForegroundColor Green }
            "Failed" { Write-Host $log.Status -ForegroundColor Red }
            default { Write-Host $log.Status -ForegroundColor Yellow }
        }
        
        if ($log.Duration) {
            Write-Host "  Duration: $($log.Duration.TotalSeconds.ToString('F1')) seconds" -ForegroundColor Gray
        }
        
        Write-Host ""
        Write-Host "  Configuration:" -ForegroundColor Cyan
        Write-Host "    Source: $($log.Source)" -ForegroundColor Gray
        Write-Host "    Mode: $($log.ExtractMode)" -ForegroundColor Gray
        Write-Host "    Require Lot Numbers: $($log.RequireLotNumbers)" -ForegroundColor Gray
        
        Write-Host ""
        Write-Host "  Results:" -ForegroundColor Cyan
        Write-Host "    Files processed: $($log.FilesProcessed)" -ForegroundColor Gray
        Write-Host "    Auctions found: $($log.TotalAuctions)" -ForegroundColor Gray
        Write-Host "    Lots extracted: $($log.TotalLots)" -ForegroundColor Green
        if ($log.SkippedLots -gt 0) {
            Write-Host "    Lots skipped: $($log.SkippedLots)" -ForegroundColor Yellow
        }
        
        if ($log.Auctions.Count -gt 0) {
            Write-Host ""
            Write-Host "  Auctions:" -ForegroundColor Cyan
            foreach ($auction in $log.Auctions) {
                $extracted = if ($log.ExtractedAuctions -contains $auction.CatalogId) { " [EXTRACTED]" } else { "" }
                Write-Host "    [$($auction.Index)] $($auction.CatalogId): $($auction.Lots) lot(s) ($($auction.Range))$extracted" -ForegroundColor Gray
            }
        }
        
        if ($log.Errors.Count -gt 0) {
            Write-Host ""
            Write-Host "  Errors:" -ForegroundColor Red
            foreach ($err in $log.Errors) {
                Write-Host "    [$($err.Time.ToString('HH:mm:ss'))] $($err.Message)" -ForegroundColor Red
            }
        }
        
        if ($log.Warnings.Count -gt 0) {
            Write-Host ""
            Write-Host "  Warnings:" -ForegroundColor Yellow
            foreach ($warning in $log.Warnings) {
                Write-Host "    [$($warning.Time.ToString('HH:mm:ss'))] $($warning.Message)" -ForegroundColor Yellow
            }
        }
    }
    Write-Host ""
}

# Generate Errors Report
function Show-ErrorsReport {
    param([array]$Logs)
    
    Write-Host ""
    Write-Host "═══════════════════════════════════════════════════════" -ForegroundColor Cyan
    Write-Host "            ERRORS AND WARNINGS REPORT" -ForegroundColor Cyan
    Write-Host "═══════════════════════════════════════════════════════" -ForegroundColor Cyan
    Write-Host ""
    
    $logsWithIssues = $Logs | Where-Object { $_.Errors.Count -gt 0 -or $_.Warnings.Count -gt 0 }
    
    if ($logsWithIssues.Count -eq 0) {
        Write-Host "No errors or warnings found!" -ForegroundColor Green
        return
    }
    
    Write-Host "Found issues in $($logsWithIssues.Count) of $($Logs.Count) log file(s)" -ForegroundColor Yellow
    Write-Host ""
    
    # Group errors by message
    $allErrors = @{}
    $allWarnings = @{}
    
    foreach ($log in $logsWithIssues) {
        foreach ($err in $log.Errors) {
            if (-not $allErrors.ContainsKey($err.Message)) {
                $allErrors[$err.Message] = @()
            }
            $allErrors[$err.Message] += [PSCustomObject]@{
                File = $log.FileName
                Time = $err.Time
            }
        }
        
        foreach ($warning in $log.Warnings) {
            if (-not $allWarnings.ContainsKey($warning.Message)) {
                $allWarnings[$warning.Message] = @()
            }
            $allWarnings[$warning.Message] += [PSCustomObject]@{
                File = $log.FileName
                Time = $warning.Time
            }
        }
    }
    
    if ($allErrors.Count -gt 0) {
        Write-Host "ERRORS by frequency:" -ForegroundColor Red
        $sortedErrors = $allErrors.GetEnumerator() | Sort-Object { $_.Value.Count } -Descending
        foreach ($err in $sortedErrors) {
            Write-Host "  [$($err.Value.Count)x] $($err.Key)" -ForegroundColor Red
            if ($err.Value.Count -le 3) {
                foreach ($occurrence in $err.Value) {
                    Write-Host "       → $($occurrence.File) at $($occurrence.Time.ToString('yyyy-MM-dd HH:mm'))" -ForegroundColor DarkRed
                }
            }
        }
        Write-Host ""
    }
    
    if ($allWarnings.Count -gt 0) {
        Write-Host "WARNINGS by frequency:" -ForegroundColor Yellow
        $sortedWarnings = $allWarnings.GetEnumerator() | Sort-Object { $_.Value.Count } -Descending
        foreach ($warning in $sortedWarnings) {
            Write-Host "  [$($warning.Value.Count)x] $($warning.Key)" -ForegroundColor Yellow
            if ($warning.Value.Count -le 3) {
                foreach ($occurrence in $warning.Value) {
                    Write-Host "       → $($occurrence.File) at $($occurrence.Time.ToString('yyyy-MM-dd HH:mm'))" -ForegroundColor DarkYellow
                }
            }
        }
        Write-Host ""
    }
}

# Generate Auctions Report
function Show-AuctionsReport {
    param([array]$Logs)
    
    Write-Host ""
    Write-Host "═══════════════════════════════════════════════════════" -ForegroundColor Cyan
    Write-Host "          AUCTION PROCESSING HISTORY" -ForegroundColor Cyan
    Write-Host "═══════════════════════════════════════════════════════" -ForegroundColor Cyan
    Write-Host ""
    
    # Compile auction statistics
    $auctionStats = @{}
    
    foreach ($log in $Logs) {
        foreach ($auction in $log.Auctions) {
            if (-not $auctionStats.ContainsKey($auction.CatalogId)) {
                $auctionStats[$auction.CatalogId] = [PSCustomObject]@{
                    CatalogId = $auction.CatalogId
                    TimesFound = 0
                    TimesExtracted = 0
                    TotalLots = 0
                    FirstSeen = $log.StartTime
                    LastSeen = $log.StartTime
                    LotRanges = @()
                }
            }
            
            $stats = $auctionStats[$auction.CatalogId]
            $stats.TimesFound++
            $stats.TotalLots += $auction.Lots
            
            if ($log.ExtractedAuctions -contains $auction.CatalogId) {
                $stats.TimesExtracted++
            }
            
            if ($log.StartTime -lt $stats.FirstSeen) {
                $stats.FirstSeen = $log.StartTime
            }
            if ($log.StartTime -gt $stats.LastSeen) {
                $stats.LastSeen = $log.StartTime
            }
            
            if ($stats.LotRanges -notcontains $auction.Range) {
                $stats.LotRanges += $auction.Range
            }
        }
    }
    
    Write-Host "Total unique auctions: $($auctionStats.Count)" -ForegroundColor Yellow
    Write-Host ""
    
    $sortedAuctions = $auctionStats.Values | Sort-Object TimesFound -Descending
    
    foreach ($auction in $sortedAuctions) {
        Write-Host "$($auction.CatalogId)" -ForegroundColor Cyan
        Write-Host "  Found: $($auction.TimesFound) time(s)" -ForegroundColor Gray
        Write-Host "  Extracted: $($auction.TimesExtracted) time(s)" -ForegroundColor $(if ($auction.TimesExtracted -gt 0) { "Green" } else { "Yellow" })
        Write-Host "  Total lots: $($auction.TotalLots)" -ForegroundColor Gray
        Write-Host "  First seen: $($auction.FirstSeen.ToString('yyyy-MM-dd'))" -ForegroundColor Gray
        Write-Host "  Last seen: $($auction.LastSeen.ToString('yyyy-MM-dd'))" -ForegroundColor Gray
        Write-Host "  Lot ranges: $($auction.LotRanges -join ', ')" -ForegroundColor Gray
        Write-Host ""
    }
}

# Generate Performance Report
function Show-PerformanceReport {
    param([array]$Logs)
    
    Write-Host ""
    Write-Host "═══════════════════════════════════════════════════════" -ForegroundColor Cyan
    Write-Host "            PERFORMANCE METRICS REPORT" -ForegroundColor Cyan
    Write-Host "═══════════════════════════════════════════════════════" -ForegroundColor Cyan
    Write-Host ""
    
    $logsWithDuration = $Logs | Where-Object { $null -ne $_.Duration }
    
    if ($logsWithDuration.Count -eq 0) {
        Write-Host "No performance data available" -ForegroundColor Yellow
        return
    }
    
    Write-Host "Timing Statistics ($($logsWithDuration.Count) extraction(s)):" -ForegroundColor Yellow
    
    $avgDuration = ($logsWithDuration | Measure-Object -Property { $_.Duration.TotalSeconds } -Average).Average
    $minDuration = ($logsWithDuration | Measure-Object -Property { $_.Duration.TotalSeconds } -Minimum).Minimum
    $maxDuration = ($logsWithDuration | Measure-Object -Property { $_.Duration.TotalSeconds } -Maximum).Maximum
    
    Write-Host "  Average duration: $([math]::Round($avgDuration, 1)) seconds" -ForegroundColor Gray
    Write-Host "  Fastest: $([math]::Round($minDuration, 1)) seconds" -ForegroundColor Green
    Write-Host "  Slowest: $([math]::Round($maxDuration, 1)) seconds" -ForegroundColor Yellow
    Write-Host ""
    
    Write-Host "Processing Efficiency:" -ForegroundColor Yellow
    
    foreach ($log in $logsWithDuration | Sort-Object { $_.Duration.TotalSeconds } -Descending | Select-Object -First 5) {
        $lotsPerSec = if ($log.Duration.TotalSeconds -gt 0) { [math]::Round($log.TotalLots / $log.Duration.TotalSeconds, 1) } else { 0 }
        Write-Host "  $($log.FileName):" -ForegroundColor Cyan
        Write-Host "    Duration: $($log.Duration.TotalSeconds.ToString('F1'))s | Lots: $($log.TotalLots) | Rate: $lotsPerSec lots/sec" -ForegroundColor Gray
    }
    Write-Host ""
}

# Generate Skipped Lots Report
function Show-SkippedReport {
    param([array]$Logs)
    
    Write-Host ""
    Write-Host "═══════════════════════════════════════════════════════" -ForegroundColor Cyan
    Write-Host "           SKIPPED LOTS ANALYSIS REPORT" -ForegroundColor Cyan
    Write-Host "═══════════════════════════════════════════════════════" -ForegroundColor Cyan
    Write-Host ""
    
    $logsWithSkipped = $Logs | Where-Object { $_.SkippedLots -gt 0 }
    
    if ($logsWithSkipped.Count -eq 0) {
        Write-Host "No skipped lots found!" -ForegroundColor Green
        return
    }
    
    Write-Host "Overall Skipped Lots Statistics:" -ForegroundColor Yellow
    $totalProcessed = ($Logs | Measure-Object -Property TotalLots -Sum).Sum
    $totalSkipped = ($Logs | Measure-Object -Property SkippedLots -Sum).Sum
    $totalAttempted = $totalProcessed + $totalSkipped
    $skipRate = if ($totalAttempted -gt 0) { [math]::Round(($totalSkipped / $totalAttempted) * 100, 1) } else { 0 }
    
    Write-Host "  Total lots attempted: $totalAttempted" -ForegroundColor Gray
    Write-Host "  Lots extracted: $totalProcessed" -ForegroundColor Green
    Write-Host "  Lots skipped: $totalSkipped" -ForegroundColor Yellow
    Write-Host "  Skip rate: $skipRate%" -ForegroundColor $(if ($skipRate -gt 20) { "Red" } elseif ($skipRate -gt 10) { "Yellow" } else { "Green" })
    Write-Host ""
    
    Write-Host "Extractions with Skipped Lots:" -ForegroundColor Yellow
    foreach ($log in $logsWithSkipped | Sort-Object SkippedLots -Descending) {
        $logSkipRate = if (($log.TotalLots + $log.SkippedLots) -gt 0) {
            [math]::Round(($log.SkippedLots / ($log.TotalLots + $log.SkippedLots)) * 100, 1)
        } else { 0 }
        
        Write-Host "  $($log.FileName):" -ForegroundColor Cyan
        Write-Host "    Skipped: $($log.SkippedLots) | Extracted: $($log.TotalLots) | Rate: $logSkipRate%" -ForegroundColor Gray
        Write-Host "    Date: $($log.StartTime.ToString('yyyy-MM-dd HH:mm'))" -ForegroundColor DarkGray
    }
    Write-Host ""
    
    Write-Host "Recommendation:" -ForegroundColor Yellow
    if ($skipRate -gt 20) {
        Write-Host "  High skip rate detected. Consider:" -ForegroundColor Red
        Write-Host "  - Checking if lot numbers are consistently available in HTML source" -ForegroundColor Gray
        Write-Host "  - Running with -RequireLotNumbers:`$false if lot numbers aren't needed" -ForegroundColor Gray
    } elseif ($skipRate -gt 10) {
        Write-Host "  Moderate skip rate. This may be normal for some auction formats." -ForegroundColor Yellow
    } else {
        Write-Host "  Skip rate is within normal range." -ForegroundColor Green
    }
    Write-Host ""
}

# Generate HTML Report with Charts
function Export-HTMLReport {
    param(
        [array]$Logs,
        [string]$OutputPath,
        [string]$ReportType = 'Summary'
    )
    
    $reportTitle = "Auction Extraction Log Analysis - $ReportType Report"
    $generatedDate = Get-Date -Format "MMMM dd, yyyy 'at' HH:mm:ss"
    
    # Calculate statistics
    $totalAuctions = ($Logs | Measure-Object -Property TotalAuctions -Sum).Sum
    $totalLots = ($Logs | Measure-Object -Property TotalLots -Sum).Sum
    $totalSkipped = ($Logs | Measure-Object -Property SkippedLots -Sum).Sum
    $totalErrors = ($Logs | ForEach-Object { $_.Errors.Count } | Measure-Object -Sum).Sum
    $totalWarnings = ($Logs | ForEach-Object { $_.Warnings.Count } | Measure-Object -Sum).Sum
    $successful = ($Logs | Where-Object { $_.Status -eq "Success" }).Count
    $failed = ($Logs | Where-Object { $_.Status -eq "Failed" }).Count
    
    # Prepare data for charts
    $sortedLogs = $Logs | Sort-Object StartTime
    
    # Timeline data
    $timelineLabels = ($sortedLogs | ForEach-Object { $_.StartTime.ToString("MM/dd HH:mm") }) -join '","'
    $timelineLots = ($sortedLogs | ForEach-Object { $_.TotalLots }) -join ','
    $timelineSkipped = ($sortedLogs | ForEach-Object { $_.SkippedLots }) -join ','
    
    # Status pie chart data
    $other = $Logs.Count - $successful - $failed
    
    # Top auctions data
    $allAuctions = @{}
    foreach ($log in $Logs) {
        foreach ($auction in $log.Auctions) {
            if (-not $allAuctions.ContainsKey($auction.CatalogId)) {
                $allAuctions[$auction.CatalogId] = 0
            }
            $allAuctions[$auction.CatalogId] += $auction.Lots
        }
    }
    
    $topAuctions = $allAuctions.GetEnumerator() | Sort-Object Value -Descending | Select-Object -First 10
    $auctionLabels = ($topAuctions | ForEach-Object { $_.Key }) -join '","'
    $auctionValues = ($topAuctions | ForEach-Object { $_.Value }) -join ','
    
    # Performance data
    $logsWithDuration = $Logs | Where-Object { $null -ne $_.Duration } | Sort-Object StartTime
    $perfLabels = ($logsWithDuration | ForEach-Object { $_.StartTime.ToString("MM/dd") }) -join '","'
    $perfDurations = ($logsWithDuration | ForEach-Object { [math]::Round($_.Duration.TotalSeconds, 1) }) -join ','
    $perfLotsPerSec = ($logsWithDuration | ForEach-Object { 
        if ($_.Duration.TotalSeconds -gt 0) { [math]::Round($_.TotalLots / $_.Duration.TotalSeconds, 2) } else { 0 }
    }) -join ','
    
    # User distribution
    $userGroups = $Logs | Group-Object User
    $userLabels = ($userGroups | ForEach-Object { $_.Name }) -join '","'
    $userCounts = ($userGroups | ForEach-Object { $_.Count }) -join ','
    
    # Build extraction history table
    $historyRows = ""
    foreach ($log in ($Logs | Sort-Object StartTime -Descending | Select-Object -First 20)) {
        $statusClass = switch ($log.Status) {
            "Success" { "status-success" }
            "Failed" { "status-failed" }
            default { "status-other" }
        }
        
        $duration = if ($null -ne $log.Duration) { "$([math]::Round($log.Duration.TotalSeconds, 1))s" } else { "N/A" }
        $issues = $log.Errors.Count + $log.Warnings.Count
        $issuesClass = if ($issues -gt 0) { "has-issues" } else { "" }
        
        $historyRows += @"
        <tr>
            <td>$($log.StartTime.ToString('yyyy-MM-dd HH:mm'))</td>
            <td>$($log.User)</td>
            <td><span class="status-badge $statusClass">$($log.Status)</span></td>
            <td class="text-right">$($log.FilesProcessed)</td>
            <td class="text-right">$($log.TotalAuctions)</td>
            <td class="text-right">$($log.TotalLots)</td>
            <td class="text-right">$($log.SkippedLots)</td>
            <td class="text-right">$duration</td>
            <td class="text-right $issuesClass">$issues</td>
        </tr>
"@
    }
    
    # Build auction summary table
    $auctionRows = ""
    $auctionStats = @{}
    
    foreach ($log in $Logs) {
        foreach ($auction in $log.Auctions) {
            if (-not $auctionStats.ContainsKey($auction.CatalogId)) {
                $auctionStats[$auction.CatalogId] = [PSCustomObject]@{
                    CatalogId = $auction.CatalogId
                    TimesFound = 0
                    TimesExtracted = 0
                    TotalLots = 0
                    LastSeen = $log.StartTime
                }
            }
            
            $stats = $auctionStats[$auction.CatalogId]
            $stats.TimesFound++
            $stats.TotalLots += $auction.Lots
            
            if ($log.ExtractedAuctions -contains $auction.CatalogId) {
                $stats.TimesExtracted++
            }
            
            if ($log.StartTime -gt $stats.LastSeen) {
                $stats.LastSeen = $log.StartTime
            }
        }
    }
    
    foreach ($auction in ($auctionStats.Values | Sort-Object TotalLots -Descending | Select-Object -First 15)) {
        $extractedClass = if ($auction.TimesExtracted -gt 0) { "extracted" } else { "not-extracted" }
        $auctionRows += @"
        <tr>
            <td><strong>$($auction.CatalogId)</strong></td>
            <td class="text-right">$($auction.TimesFound)</td>
            <td class="text-right $extractedClass">$($auction.TimesExtracted)</td>
            <td class="text-right">$($auction.TotalLots)</td>
            <td>$($auction.LastSeen.ToString('yyyy-MM-dd'))</td>
        </tr>
"@
    }

$html = @"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>$reportTitle</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 20px;
            color: #333;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.2);
            overflow: hidden;
        }
        
        header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px 40px;
            border-bottom: 4px solid #5568d3;
        }
        
        header h1 {
            font-size: 28px;
            margin-bottom: 8px;
            font-weight: 600;
        }
        
        header .subtitle {
            font-size: 14px;
            opacity: 0.9;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            padding: 30px 40px;
            background: #f8f9fa;
            border-bottom: 1px solid #e0e0e0;
        }
        
        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            border-left: 4px solid #667eea;
        }
        
        .stat-card.success {
            border-left-color: #10b981;
        }
        
        .stat-card.warning {
            border-left-color: #f59e0b;
        }
        
        .stat-card.danger {
            border-left-color: #ef4444;
        }
        
        .stat-card h3 {
            font-size: 13px;
            color: #666;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 8px;
            font-weight: 500;
        }
        
        .stat-card .value {
            font-size: 32px;
            font-weight: 700;
            color: #333;
        }
        
        .content {
            padding: 40px;
        }
        
        .section {
            margin-bottom: 40px;
        }
        
        .section h2 {
            font-size: 22px;
            margin-bottom: 20px;
            color: #667eea;
            border-bottom: 2px solid #e0e0e0;
            padding-bottom: 10px;
        }
        
        .chart-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 30px;
            margin-bottom: 40px;
        }
        
        .chart-container {
            background: white;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .chart-container h3 {
            font-size: 16px;
            margin-bottom: 20px;
            color: #333;
            font-weight: 600;
        }
        
        .chart-wrapper {
            position: relative;
            height: 300px;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            border-radius: 8px;
            overflow: hidden;
        }
        
        thead {
            background: #667eea;
            color: white;
        }
        
        th {
            padding: 15px;
            text-align: left;
            font-weight: 600;
            font-size: 13px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        td {
            padding: 12px 15px;
            border-bottom: 1px solid #f0f0f0;
        }
        
        tr:hover {
            background-color: #f8f9fa;
        }
        
        tbody tr:last-child td {
            border-bottom: none;
        }
        
        .text-right {
            text-align: right;
        }
        
        .status-badge {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
        }
        
        .status-success {
            background: #d1fae5;
            color: #065f46;
        }
        
        .status-failed {
            background: #fee2e2;
            color: #991b1b;
        }
        
        .status-other {
            background: #fef3c7;
            color: #92400e;
        }
        
        .has-issues {
            color: #dc2626;
            font-weight: 600;
        }
        
        .extracted {
            color: #10b981;
            font-weight: 600;
        }
        
        .not-extracted {
            color: #9ca3af;
        }
        
        footer {
            background: #f8f9fa;
            padding: 20px 40px;
            border-top: 1px solid #e0e0e0;
            text-align: center;
            color: #666;
            font-size: 13px;
        }
        
        .info-box {
            background: #eff6ff;
            border-left: 4px solid #3b82f6;
            padding: 15px 20px;
            border-radius: 4px;
            margin-bottom: 20px;
        }
        
        .info-box p {
            margin: 0;
            color: #1e40af;
            font-size: 14px;
        }
        
        .issues-container {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .no-issues {
            text-align: center;
            padding: 40px 20px;
            background: #f0fdf4;
            border-radius: 8px;
            border: 2px dashed #86efac;
        }
        
        .no-issues p {
            color: #166534;
            font-size: 16px;
            font-weight: 600;
            margin: 0;
        }
        
        .issue-section {
            margin-bottom: 30px;
        }
        
        .issue-section:last-child {
            margin-bottom: 0;
        }
        
        .issue-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 2px solid #e5e7eb;
        }
        
        .error-title {
            color: #dc2626;
        }
        
        .warning-title {
            color: #f59e0b;
        }
        
        .issue-item {
            background: #f9fafb;
            border-left: 4px solid #e5e7eb;
            padding: 15px;
            margin-bottom: 12px;
            border-radius: 4px;
        }
        
        .error-item {
            background: #fef2f2;
            border-left-color: #dc2626;
        }
        
        .warning-item {
            background: #fffbeb;
            border-left-color: #f59e0b;
        }
        
        .issue-header {
            display: flex;
            align-items: center;
            gap: 12px;
        }
        
        .issue-badge {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            min-width: 40px;
            height: 24px;
            padding: 0 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 700;
            flex-shrink: 0;
        }
        
        .error-badge {
            background: #dc2626;
            color: white;
        }
        
        .warning-badge {
            background: #f59e0b;
            color: white;
        }
        
        .issue-message {
            flex: 1;
            font-size: 14px;
            color: #374151;
            line-height: 1.5;
        }
        
        .issue-occurrences {
            margin-top: 12px;
            padding-top: 12px;
            border-top: 1px solid #e5e7eb;
        }
        
        .occurrence {
            font-size: 13px;
            color: #6b7280;
            padding: 4px 0;
            font-family: 'Consolas', 'Courier New', monospace;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>📊 $reportTitle</h1>
            <div class="subtitle">Generated on $generatedDate | Analyzing $($Logs.Count) extraction log(s)</div>
        </header>
        
        <div class="stats-grid">
            <div class="stat-card">
                <h3>Total Extractions</h3>
                <div class="value">$($Logs.Count)</div>
            </div>
            <div class="stat-card success">
                <h3>Lots Extracted</h3>
                <div class="value">$totalLots</div>
            </div>
            <div class="stat-card">
                <h3>Auctions Found</h3>
                <div class="value">$totalAuctions</div>
            </div>
            <div class="stat-card warning">
                <h3>Lots Skipped</h3>
                <div class="value">$totalSkipped</div>
            </div>
            <div class="stat-card success">
                <h3>Successful Runs</h3>
                <div class="value">$successful</div>
            </div>
            <div class="stat-card danger">
                <h3>Failed Runs</h3>
                <div class="value">$failed</div>
            </div>
        </div>
        
        <div class="content">
            <div class="section">
                <h2>📈 Extraction Trends</h2>
                <div class="chart-grid">
                    <div class="chart-container">
                        <h3>Lots Extracted Over Time</h3>
                        <div class="chart-wrapper">
                            <canvas id="timelineChart"></canvas>
                        </div>
                    </div>
                    <div class="chart-container">
                        <h3>Extraction Status Distribution</h3>
                        <div class="chart-wrapper">
                            <canvas id="statusChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="section">
                <h2>🏆 Top Auctions by Lots</h2>
                <div class="chart-container">
                    <div class="chart-wrapper">
                        <canvas id="auctionsChart"></canvas>
                    </div>
                </div>
            </div>
            
            <div class="section">
                <h2>⚡ Performance Metrics</h2>
                <div class="chart-grid">
                    <div class="chart-container">
                        <h3>Processing Duration</h3>
                        <div class="chart-wrapper">
                            <canvas id="performanceChart"></canvas>
                        </div>
                    </div>
                    <div class="chart-container">
                        <h3>Extraction Rate (Lots/Second)</h3>
                        <div class="chart-wrapper">
                            <canvas id="efficiencyChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="section">
                <h2>👥 Activity by User</h2>
                <div class="chart-container">
                    <div class="chart-wrapper" style="height: 250px;">
                        <canvas id="userChart"></canvas>
                    </div>
                </div>
            </div>
            
            <div class="section">
                <h2>⚠️ Issues and Warnings</h2>
                <div class="issues-container">
                    $(if ($totalErrors -gt 0 -or $totalWarnings -gt 0) {
                        $issuesHTML = ""
                        
                        # Group all errors
                        $allErrorMessages = @{}
                        $allWarningMessages = @{}
                        
                        foreach ($log in $Logs) {
                            foreach ($err in $log.Errors) {
                                if (-not $allErrorMessages.ContainsKey($err.Message)) {
                                    $allErrorMessages[$err.Message] = @()
                                }
                                $allErrorMessages[$err.Message] += [PSCustomObject]@{
                                    File = $log.FileName
                                    Time = $err.Time
                                }
                            }
                            
                            foreach ($warn in $log.Warnings) {
                                if (-not $allWarningMessages.ContainsKey($warn.Message)) {
                                    $allWarningMessages[$warn.Message] = @()
                                }
                                $allWarningMessages[$warn.Message] += [PSCustomObject]@{
                                    File = $log.FileName
                                    Time = $warn.Time
                                }
                            }
                        }
                        
                        if ($allErrorMessages.Count -gt 0) {
                            $issuesHTML += "<div class='issue-section error-section'>"
                            $issuesHTML += "<h3 class='issue-title error-title'>Errors ($totalErrors)</h3>"
                            
                            foreach ($errGroup in ($allErrorMessages.GetEnumerator() | Sort-Object { $_.Value.Count } -Descending)) {
                                $issuesHTML += "<div class='issue-item error-item'>"
                                $issuesHTML += "<div class='issue-header'>"
                                $issuesHTML += "<span class='issue-badge error-badge'>$($errGroup.Value.Count)x</span>"
                                $issuesHTML += "<span class='issue-message'>$($errGroup.Key)</span>"
                                $issuesHTML += "</div>"
                                
                                if ($errGroup.Value.Count -le 5) {
                                    $issuesHTML += "<div class='issue-occurrences'>"
                                    foreach ($occurrence in $errGroup.Value) {
                                        $issuesHTML += "<div class='occurrence'>→ $($occurrence.File) at $($occurrence.Time.ToString('yyyy-MM-dd HH:mm:ss'))</div>"
                                    }
                                    $issuesHTML += "</div>"
                                }
                                
                                $issuesHTML += "</div>"
                            }
                            
                            $issuesHTML += "</div>"
                        }
                        
                        if ($allWarningMessages.Count -gt 0) {
                            $issuesHTML += "<div class='issue-section warning-section'>"
                            $issuesHTML += "<h3 class='issue-title warning-title'>Warnings ($totalWarnings)</h3>"
                            
                            foreach ($warnGroup in ($allWarningMessages.GetEnumerator() | Sort-Object { $_.Value.Count } -Descending)) {
                                $issuesHTML += "<div class='issue-item warning-item'>"
                                $issuesHTML += "<div class='issue-header'>"
                                $issuesHTML += "<span class='issue-badge warning-badge'>$($warnGroup.Value.Count)x</span>"
                                $issuesHTML += "<span class='issue-message'>$($warnGroup.Key)</span>"
                                $issuesHTML += "</div>"
                                
                                if ($warnGroup.Value.Count -le 5) {
                                    $issuesHTML += "<div class='issue-occurrences'>"
                                    foreach ($occurrence in $warnGroup.Value) {
                                        $issuesHTML += "<div class='occurrence'>→ $($occurrence.File) at $($occurrence.Time.ToString('yyyy-MM-dd HH:mm:ss'))</div>"
                                    }
                                    $issuesHTML += "</div>"
                                }
                                
                                $issuesHTML += "</div>"
                            }
                            
                            $issuesHTML += "</div>"
                        }
                        
                        $issuesHTML
                    } else {
                        "<div class='no-issues'><p>✓ No errors or warnings found in any extraction runs!</p></div>"
                    })
                </div>
            </div>
            
            <div class="section">
                <h2>📋 Recent Extraction History</h2>
                <div class="info-box">
                    <p>Showing the 20 most recent extraction runs</p>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th>Date & Time</th>
                            <th>User</th>
                            <th>Status</th>
                            <th class="text-right">Files</th>
                            <th class="text-right">Auctions</th>
                            <th class="text-right">Lots</th>
                            <th class="text-right">Skipped</th>
                            <th class="text-right">Duration</th>
                            <th class="text-right">Issues</th>
                        </tr>
                    </thead>
                    <tbody>
                        $historyRows
                    </tbody>
                </table>
            </div>
            
            <div class="section">
                <h2>🎯 Auction Processing Summary</h2>
                <div class="info-box">
                    <p>Top 15 auctions by total lots processed across all extractions</p>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th>Catalog ID</th>
                            <th class="text-right">Times Found</th>
                            <th class="text-right">Times Extracted</th>
                            <th class="text-right">Total Lots</th>
                            <th>Last Seen</th>
                        </tr>
                    </thead>
                    <tbody>
                        $auctionRows
                    </tbody>
                </table>
            </div>
        </div>
        
        <footer>
            <p>Generated by Get-AuctionLogSummary.ps1 • Auction Log Analyzer v1.0</p>
        </footer>
    </div>
    
    <script>
        // Chart.js default configuration
        Chart.defaults.font.family = "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif";
        Chart.defaults.color = '#666';
        
        // Timeline Chart
        new Chart(document.getElementById('timelineChart'), {
            type: 'line',
            data: {
                labels: ["$timelineLabels"],
                datasets: [
                    {
                        label: 'Lots Extracted',
                        data: [$timelineLots],
                        borderColor: '#10b981',
                        backgroundColor: 'rgba(16, 185, 129, 0.1)',
                        tension: 0.4,
                        fill: true
                    },
                    {
                        label: 'Lots Skipped',
                        data: [$timelineSkipped],
                        borderColor: '#f59e0b',
                        backgroundColor: 'rgba(245, 158, 11, 0.1)',
                        tension: 0.4,
                        fill: true
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
        
        // Status Pie Chart
        new Chart(document.getElementById('statusChart'), {
            type: 'doughnut',
            data: {
                labels: ['Success', 'Failed', 'Other'],
                datasets: [{
                    data: [$successful, $failed, $other],
                    backgroundColor: [
                        '#10b981',
                        '#ef4444',
                        '#f59e0b'
                    ],
                    borderWidth: 2,
                    borderColor: '#fff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
        
        // Top Auctions Bar Chart
        new Chart(document.getElementById('auctionsChart'), {
            type: 'bar',
            data: {
                labels: ["$auctionLabels"],
                datasets: [{
                    label: 'Total Lots',
                    data: [$auctionValues],
                    backgroundColor: '#667eea',
                    borderColor: '#5568d3',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                indexAxis: 'y',
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    x: {
                        beginAtZero: true
                    }
                }
            }
        });
        
        // Performance Chart
        new Chart(document.getElementById('performanceChart'), {
            type: 'line',
            data: {
                labels: ["$perfLabels"],
                datasets: [{
                    label: 'Duration (seconds)',
                    data: [$perfDurations],
                    borderColor: '#8b5cf6',
                    backgroundColor: 'rgba(139, 92, 246, 0.1)',
                    tension: 0.4,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
        
        // Efficiency Chart
        new Chart(document.getElementById('efficiencyChart'), {
            type: 'bar',
            data: {
                labels: ["$perfLabels"],
                datasets: [{
                    label: 'Lots per Second',
                    data: [$perfLotsPerSec],
                    backgroundColor: '#06b6d4',
                    borderColor: '#0891b2',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
        
        // User Activity Chart
        new Chart(document.getElementById('userChart'), {
            type: 'pie',
            data: {
                labels: ["$userLabels"],
                datasets: [{
                    data: [$userCounts],
                    backgroundColor: [
                        '#667eea',
                        '#10b981',
                        '#f59e0b',
                        '#ef4444',
                        '#8b5cf6',
                        '#06b6d4'
                    ],
                    borderWidth: 2,
                    borderColor: '#fff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'right'
                    }
                }
            }
        });
    </script>
</body>
</html>
"@

    $html | Out-File -FilePath $OutputPath -Encoding UTF8
}

# Main execution
Write-Host ""
Write-Host "Auction Log Analyzer" -ForegroundColor Cyan
Write-Host "====================" -ForegroundColor Cyan
Write-Host ""

# Get log files
$logFiles = Get-LogFiles -Path $LogPath

if ($logFiles.Count -eq 0) {
    Write-Host "ERROR: No log files found at: $LogPath" -ForegroundColor Red
    exit 1
}

Write-Host "Found $($logFiles.Count) log file(s)" -ForegroundColor Green

# Parse all log files
$parsedLogs = @()
$fileIndex = 0

foreach ($file in $logFiles) {
    $fileIndex++
    
    if ($ShowProgress) {
        Write-Progress -Activity "Parsing log files" -Status "Processing $($file.Name)" -PercentComplete (($fileIndex / $logFiles.Count) * 100)
    }
    
    try {
        $parsedLog = Get-LogFileData -FilePath $file.FullName
        $parsedLogs += $parsedLog
    }
    catch {
        Write-Host "Warning: Failed to parse $($file.Name): $_" -ForegroundColor Yellow
    }
}

if ($ShowProgress) {
    Write-Progress -Activity "Parsing log files" -Completed
}

# Apply filters
if ($DaysBack -gt 0) {
    $beforeFilter = $parsedLogs.Count
    $parsedLogs = Select-LogsByDate -Logs $parsedLogs -Days $DaysBack
    Write-Host "Filtered to last $DaysBack days: $($parsedLogs.Count) of $beforeFilter log(s)" -ForegroundColor Gray
}

if ($AuctionFilter) {
    $beforeFilter = $parsedLogs.Count
    $parsedLogs = Select-LogsByAuction -Logs $parsedLogs -Filter $AuctionFilter
    Write-Host "Filtered to specific auction(s): $($parsedLogs.Count) of $beforeFilter log(s)" -ForegroundColor Gray
}

if ($parsedLogs.Count -eq 0) {
    Write-Host "No logs match the filter criteria" -ForegroundColor Yellow
    exit 0
}

# Sort logs
switch ($SortBy) {
    'Date' { $parsedLogs = $parsedLogs | Sort-Object StartTime -Descending }
    'Lots' { $parsedLogs = $parsedLogs | Sort-Object TotalLots -Descending }
    'Auctions' { $parsedLogs = $parsedLogs | Sort-Object TotalAuctions -Descending }
    'Errors' { $parsedLogs = $parsedLogs | Sort-Object { $_.Errors.Count + $_.Warnings.Count } -Descending }
}

# Generate requested report
switch ($ReportType) {
    'Summary' { Show-SummaryReport -Logs $parsedLogs }
    'Detailed' { Show-DetailedReport -Logs $parsedLogs }
    'Errors' { Show-ErrorsReport -Logs $parsedLogs }
    'Auctions' { Show-AuctionsReport -Logs $parsedLogs }
    'History' { Show-DetailedReport -Logs $parsedLogs }
    'Performance' { 
        Show-PerformanceReport -Logs $parsedLogs
    }
    'Skipped' {
        Show-SkippedReport -Logs $parsedLogs
    }
}

# Export if requested
if ($OutputFormat -ne 'Console') {
    $exportFile = Join-Path $OutputPath "auction_log_report_$(Get-Date -Format 'yyyyMMdd_HHmmss').$($OutputFormat.ToLower())"
    
    switch ($OutputFormat) {
        'CSV' {
            $parsedLogs | Select-Object FileName, StartTime, User, Status, FilesProcessed, TotalAuctions, TotalLots, SkippedLots, @{N='Errors';E={$_.Errors.Count}}, @{N='Warnings';E={$_.Warnings.Count}} | 
                Export-Csv -Path $exportFile -NoTypeInformation
            Write-Host ""
            Write-Host "Exported to CSV: $exportFile" -ForegroundColor Green
        }
        'JSON' {
            $parsedLogs | ConvertTo-Json -Depth 10 | Out-File -FilePath $exportFile
            Write-Host ""
            Write-Host "Exported to JSON: $exportFile" -ForegroundColor Green
        }
        'HTML' {
            $exportFile = Join-Path $OutputPath "auction_log_report_$(Get-Date -Format 'yyyyMMdd_HHmmss').html"
            Export-HTMLReport -Logs $parsedLogs -OutputPath $exportFile -ReportType $ReportType
            Write-Host ""
            Write-Host "Exported to HTML: $exportFile" -ForegroundColor Green
            Write-Host ""
            Write-Host "Opening report in default browser..." -ForegroundColor Gray
            Start-Process $exportFile
        }
    }
}

Write-Host ""